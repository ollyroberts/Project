lam * dnorm(x, mu, sigma)
}
set.seed(1)
mixmdl2 <- (normalmixEM(proline_angles, k = 2, maxit=10000))
mixmdl3 <- (normalmixEM(proline_angles, k = 3, maxit=10000))
summary(mixmdl2)
data.frame(bend_angle = mixmdl2$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[1], mixmdl2$sigma[1], lam = mixmdl2$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[2], mixmdl2$sigma[2], lam = mixmdl2$lambda[2]),
colour = "blue", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("two gaussian mixed model")
ylab("Density")
summary(mixmdl3)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[1], mixmdl3$sigma[1], lam = mixmdl3$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[2], mixmdl3$sigma[2], lam = mixmdl3$lambda[2]),
colour = "blue", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[3], mixmdl3$sigma[3], lam = mixmdl3$lambda[2]),
colour = "green", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("Three gaussian mixed model")
ylab("Density")
proline_angle_df <- data.frame(proline_angles)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot(proline_angle_df, aes(x=proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("proline bend angles with density function")
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
combined_1gap_proline_16_07_19_output <- read.table("~/Downloads/rstudio/rstudio/1_gap/combined_1gap_proline_16_07_19_output.txt", quote="\"", comment.char="")
View(combined_1gap_proline_16_07_19_output)
non_proline <- read.csv("~/Downloads/rstudio/rstudio/1_gap/non_proline.csv", header=FALSE)
View(non_proline)
library("ggplot2")
library("dplyr")
load("proline.Rda")
load("non_proline.Rda")
# for the newer format that is 1	1ju2	A257	A263	173.03680
proline_angles <- combined_1gap_proline_16_07_19_output[,4]
non_proline_angles <- non_proline[,3]
options(scipen = 999)
library("mixtools")
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
set.seed(1)
mixmdl2 <- (normalmixEM(proline_angles, k = 2, maxit=10000))
mixmdl3 <- (normalmixEM(proline_angles, k = 3, maxit=10000))
summary(mixmdl2)
data.frame(bend_angle = mixmdl2$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[1], mixmdl2$sigma[1], lam = mixmdl2$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[2], mixmdl2$sigma[2], lam = mixmdl2$lambda[2]),
colour = "blue", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("two gaussian mixed model")
ylab("Density")
summary(mixmdl3)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[1], mixmdl3$sigma[1], lam = mixmdl3$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[2], mixmdl3$sigma[2], lam = mixmdl3$lambda[2]),
colour = "blue", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[3], mixmdl3$sigma[3], lam = mixmdl3$lambda[2]),
colour = "green", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("Three gaussian mixed model")
ylab("Density")
proline_angle_df <- data.frame(proline_angles)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot(proline_angle_df, aes(x=proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("proline bend angles with density function")
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
save(combined_1gap_proline_16_07_19_output,file='proline_1gap')
load("proline.Rda")
load("non_proline.Rda")
save(combined_1gap_proline_16_07_19_output,file='proline_1gap')
load("proline.Rda")
library("ggplot2")
library("dplyr")
library(nortest)
load("proline.Rda")
load("non_proline.Rda")
library(readr)
X1gap_proline <- read_table2("Git/Project/helix_counts/1_gap/1gap_03.08.2019_2angle.txt",
col_names = FALSE)
View(X1gap_proline)
library(readr)
X3none_proline <- read_table2("Git/Project/helix_counts/3_gap/3gap_03.08.2019_1angle.txt",
col_names = FALSE)
View(X3none_proline)
View(X3none_proline)
non_proline_angles <- X3none_proline$X6
proline_angles <- X1gap_proline$X6
#non_proline_angles <- options(scipen = 999)
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
set.seed(1)
mixmdl2 <- (normalmixEM(proline_angles, k = 2, maxit=10000))
mixmdl3 <- (normalmixEM(proline_angles, k = 3, maxit=10000))
#mixmdl4 <- (normalmixEM(proline_angles, k = 4, maxit=10000))
#mixmdl5 <- (normalmixEM(proline_angles, k = 5, maxit=10000))
#mixmdl6 <- (normalmixEM(proline_angles, k = 6, maxit=10000))
#mixmdl7 <- (normalmixEM(proline_angles, k = 7, maxit=10000))
#mixmdl <- normalmixEM(proline_angles, k = 3, maxit=10000)
#summary(mixmdl)
#data.frame(bend_angle = mixmdl$x) %>%
#
#  ggplot() +
#  geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
#                 fill = "white") +
#  stat_function(geom = "line", fun = plot_mix_comps,
#                args = list(mixmdl$mu[1], mixmdl$sigma[1], lam = mixmdl$lambda[1]),
#                colour = "red", lwd = 1.5) +
#  stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[2], mixmdl$sigma[2], lam = mixmdl$lambda[2]),
#               colour = "blue", lwd = 1.5) +
# stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[3], mixmdl$sigma[3], lam = mixmdl$lambda[3]),
#               colour = "green", lwd = 1.5) +
#  ylab("Density")
summary(mixmdl2)
data.frame(bend_angle = mixmdl2$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[1], mixmdl2$sigma[1], lam = mixmdl2$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[2], mixmdl2$sigma[2], lam = mixmdl2$lambda[2]),
colour = "blue", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("two gaussian mixed model")
ylab("Density")
summary(mixmdl3)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[1], mixmdl3$sigma[1], lam = mixmdl3$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[2], mixmdl3$sigma[2], lam = mixmdl3$lambda[2]),
colour = "blue", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[3], mixmdl3$sigma[3], lam = mixmdl3$lambda[2]),
colour = "green", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("Three gaussian mixed model")
ylab("Density")
proline_angle_df <- data.frame(proline_angles)
#data.frame(bend_angle = mixmdl3$x) %>%
ggplot(proline_angle_df, aes(x=proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("proline bend angles with density function")
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
non_pro_mixmdl1 <- (normalmixEM(non_proline_angles, k = 1, maxit=10000))
library("ggplot2")
library("dplyr")
library("mixtools")
non_proline_angles <- X3none_proline$X6
proline_angles <- X1gap_proline$X6
#non_proline_angles <- options(scipen = 999)
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
set.seed(1)
mixmdl2 <- (normalmixEM(proline_angles, k = 2, maxit=10000))
mixmdl3 <- (normalmixEM(proline_angles, k = 3, maxit=10000))
#mixmdl4 <- (normalmixEM(proline_angles, k = 4, maxit=10000))
#mixmdl5 <- (normalmixEM(proline_angles, k = 5, maxit=10000))
#mixmdl6 <- (normalmixEM(proline_angles, k = 6, maxit=10000))
#mixmdl7 <- (normalmixEM(proline_angles, k = 7, maxit=10000))
#mixmdl <- normalmixEM(proline_angles, k = 3, maxit=10000)
#summary(mixmdl)
#data.frame(bend_angle = mixmdl$x) %>%
#
#  ggplot() +
#  geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
#                 fill = "white") +
#  stat_function(geom = "line", fun = plot_mix_comps,
#                args = list(mixmdl$mu[1], mixmdl$sigma[1], lam = mixmdl$lambda[1]),
#                colour = "red", lwd = 1.5) +
#  stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[2], mixmdl$sigma[2], lam = mixmdl$lambda[2]),
#               colour = "blue", lwd = 1.5) +
# stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[3], mixmdl$sigma[3], lam = mixmdl$lambda[3]),
#               colour = "green", lwd = 1.5) +
#  ylab("Density")
summary(mixmdl2)
data.frame(bend_angle = mixmdl2$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[1], mixmdl2$sigma[1], lam = mixmdl2$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[2], mixmdl2$sigma[2], lam = mixmdl2$lambda[2]),
colour = "blue", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("two gaussian mixed model")
ylab("Density")
summary(mixmdl3)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[1], mixmdl3$sigma[1], lam = mixmdl3$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[2], mixmdl3$sigma[2], lam = mixmdl3$lambda[2]),
colour = "blue", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[3], mixmdl3$sigma[3], lam = mixmdl3$lambda[2]),
colour = "green", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("Three gaussian mixed model")
ylab("Density")
proline_angle_df <- data.frame(proline_angles)
#data.frame(bend_angle = mixmdl3$x) %>%
ggplot(proline_angle_df, aes(x=proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("proline bend angles with density function")
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
non_pro_mixmdl1 <- (normalmixEM(non_proline_angles, k = 1, maxit=10000))
library("ggplot2")
library("dplyr")
library("mixtools")
library("ggplot2")
library(readr)
setwd("/home/oliver/Git/Project/R/fullset_proline_10_08_19")
#write(1:10,file="test.txt")
getwd()
write.csv(combo1_2_3, file = "one_two_three_gap_prolines.csv")
breaks <- (seq(1,180,by=1))
breaksDf <- data.frame(breaks)
one_gap_angles <-oneGap$V6
no_gap_H <- data.frame(read_table2("no_gap_H_12_08_19.txt",
col_names = FALSE))
no_gap_h <- data.frame(read_table2("no_gap_h_12_08_19.txt",
col_names = FALSE))
one_gap_not_horH <- data.frame(read_table2("one_gap_not_horH_12_08_19.txt",
col_names = FALSE))
two_gap<- data.frame(read_table2("two_gap_12_08_19.txt",
col_names = FALSE))
three_gap <- data.frame(read_table2("three_gap_12_08_19.txt",
col_names = FALSE))
no_gap_H$gap  <- "0"
no_gap_h$gap <-  "0"
one_gap_not_horH$gap <- "1"
two_gap$gap <- "2"
three_gap$gap <- "3"
no_gap_HDF <- data.frame(c(no_gap_H["X1"],no_gap_H["X6"],no_gap_H["X10"],no_gap_H["gap"]))
no_gap_hDF <- data.frame(c(no_gap_h["X1"],no_gap_h["X6"],no_gap_h["X10"],no_gap_h["gap"]))
one_gap_not_horHDF <- data.frame(c(one_gap_not_horH["X1"],one_gap_not_horH["X6"],one_gap_not_horH["X10"],one_gap_not_horH["gap"]))
two_gapDF <- data.frame(c(two_gap["X1"],two_gap["X6"],two_gap["X10"],two_gap["gap"]))
three_gapDF <- data.frame(c(three_gap["X1"],three_gap["X6"],three_gap["X10"],three_gap["gap"]))
combined <- rbind(no_gap_HDF,no_gap_hDF,one_gap_not_horHDF,two_gapDF,three_gapDF)
names(combined)[names(combined) == "X6"] <- "angle"
names(combined)[names(combined) == "X10"] <- "secstr"
names(combined)[names(combined) == "X1"] <- "pdb"
only_no_gap <- rbind(no_gap_H,no_gap_h)
names(only_no_gap)[names(only_no_gap) == "X6"] <- "angle"
names(only_no_gap)[names(only_no_gap) == "X10"] <- "secstr"
names(only_no_gap)[names(only_no_gap) == "X1"] <- "pdb"
oneGapNumeric <- numeric(oneGap$V6)
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(alpha =0.2,breaks = breaks,aes(x=oneGap$V6))+
geom_density(aes(x=oneGap$V6),col="red")
# Add weighting for combined
combined <- combined %>%
group_by(secstr) %>%
mutate(n = n()/nrow(combined))
ggplot(combined, aes(x=angle,fill=secstr)) +
geom_density(aes(weight = n), col=NA, alpha = 0.35)
ggplot(combined, aes(x = secstr, y = angle, fill=secstr))+
geom_violin( col = NA)
ggplot(combined, aes(x = angle, fill = gap)) +
geom_histogram(binwidth = 1, alpha =.5, position = "identity") +
#geom_density(alpha = .3)+
ggtitle("histogram of 'gap' containing Proline helices in alpha helices seperated by gap length")
ylab("Density") +
xlab("Bend angle of helices")
# This is an attempt to add density curve to diagram
ggplot(combined, aes(x = angle, fill = gap)) +
geom_density(alpha = .3)+
ggtitle("histogram of 'gap' containing Proline helices in alpha helices seperated by gap length")
ylab("Density") +
xlab("Bend angle of helices")
ggplot(combined, aes(x = angle, fill = secstr)) +
#geom_histogram(binwidth = .5, alpha =.5, position = "identity") +
geom_density(alpha = .3)+
ggtitle("Density of all Proline bend angles in alpha helices seperated by Secondary structure, this includes")
ylab("Density") +
xlab("Bend angle of helices")
ggplot(combined, aes(x = angle, fill = secstr)) +
geom_histogram(binwidth = 1, alpha =.5, position = "identity") +
#geom_density(alpha = .3)+
ggtitle("Histogram of all Proline bend angles in alpha helices seperated by Secondary structure, this includes")
ylab("Density") +
xlab("Bend angle of helices")
ggplot(only_no_gap, aes(x = angle, fill = secstr)) +
#geom_histogram(binwidth = .5, alpha =.5, position = "identity") +
geom_density(alpha = .3)+
ggtitle("Density of Proline bend angles in alpha helices with no gap, seperated by secondary structure")
ylab("Density") +
scale_x_continuous(name="Bend angle of helices")
ggplot(only_no_gap, aes(x = angle, fill = secstr)) +
geom_histogram(binwidth = 1, alpha =.3, position = "identity") +
#geom_density(alpha = .3)+
ggtitle("Histogram of Proline bend angles in alpha helices with no gap, seperated by secondary structure")
ylab("Density") +
xlab("Bend angle of helices")
# Maybe a violin plot or weighted geom_density is the solution https://www.youtube.com/watch?v=-jO2wuu7GUQ
# first we must add weights
only_no_gap <- only_no_gap %>%
group_by(secstr) %>%
mutate(n = n()/nrow(only_no_gap))
# modify only_no_gap to remove Na
ggplot(only_no_gap, aes(x=angle,fill=secstr)) +
geom_density(aes(weight = n), col=NA, alpha = 0.1)
ggplot(only_no_gap, aes(x = secstr, y = angle, fill=secstr))+
geom_violin(aes(weight = n), col = NA)
View(only_no_gap)
library("ggplot2")
library("dplyr")
library("mixtools")
proline <- read.table("~/Git/Project/R/1_gap_mixed_gaussians/proline.Rda", quote="\"")
View(proline)
#saveRDS(X3gap_non_proline, file = "X3gap_non_proline.rds")
#saveRDS(X3gap_proline, file = "X3gap_proline.rds")
load("~/Git/Project/R/3_gap_analysis/3_gap_proline.Rda")
#saveRDS(X3gap_non_proline, file = "X3gap_non_proline.rds")
#saveRDS(X3gap_proline, file = "X3gap_proline.rds")
load("~/Git/Project/R/3_gap_analysis/3_gap_proline.Rda")
load("~/Git/Project/R/3_gap_analysis/non_proline.Rda")
non_proline_angles <- X3none_proline$X6
proline_angles <- X1gap_proline$X6
load("proline.Rda")
load("non_proline.Rda")
load("proline.Rda")
load("non_proline.Rda")
load("~/Git/Project/R/3_gap_analysis/3_gap_proline.Rda")
load("~/Git/Project/R/3_gap_analysis/non_proline.Rda")
library("ggplot2")
library("dplyr")
library("mixtools")
load("proline.Rda")
load("non_proline.Rda")
options(scipen = 999)
load("~/Git/Project/R/3_gap_analysis/3_gap_proline.Rda")
load("~/Git/Project/R/3_gap_analysis/non_proline.Rda")
proline_angles <- proline[,3]
non_proline_angles <- non_proline[,3]
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
set.seed(1)
mixmdl2 <- (normalmixEM(proline_angles, k = 2, maxit=10000))
mixmdl3 <- (normalmixEM(proline_angles, k = 3, maxit=10000))
summary(mixmdl2)
data.frame(bend_angle = mixmdl2$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[1], mixmdl2$sigma[1], lam = mixmdl2$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[2], mixmdl2$sigma[2], lam = mixmdl2$lambda[2]),
colour = "blue", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("two gaussian mixed model")
ylab("Density")
summary(mixmdl3)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[1], mixmdl3$sigma[1], lam = mixmdl3$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[2], mixmdl3$sigma[2], lam = mixmdl3$lambda[2]),
colour = "blue", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[3], mixmdl3$sigma[3], lam = mixmdl3$lambda[2]),
colour = "green", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("Three gaussian mixed model")
ylab("Density")
mixmdl <- normalmixEM(proline_angles, k = 2, maxit=10000)
summary(mixmdl)
mixmdl <- normalmixEM(non_proline_angles, k = 2, maxit=10000)
summary(mixmdl)
mixmdl <- normalmixEM(non_proline_angles, maxit=10000)
summary(mixmdl)
mixmdl <- normalmixEM(non_proline_angles, maxit=10000)
mixmdl <- normalmixEM(non_proline_angles, k=1, maxit=10000)
mixmdl <- normalmixEM(non_proline_angles,labda = 1, maxit=10000)
mixmdl <- normalmixEM(non_proline_angles,lambda = 1, maxit=10000)
summary(mixmdl)
library("fitdistrplus")
library("MASS")
library("ggplot2")
#library("dplyr")
library("mixtools")
library("MASS")
load("proline.Rda")
load("non_proline.Rda")
library(fitdistrplus)
setwd("/home/oliver//Git/Project/R/3_gap_analysis/")
library(fitdistrplus)
