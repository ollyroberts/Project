# mean =170.130773 sd = 4.571051
proline_3rd_mixed_sample <- rnorm(100000,mean = 170.130773,sd = 4.571051)
# non_proline bend angles
# mean = 168.9382 sd = 14.3663
# this means we shall use unquel varience test
t.test(proline_3rd_mixed_sample,non_proline_angles, alternative=two.sided)
library("ggplot2")
library("dplyr")
library(nortest)
load("proline.Rda")
load("non_proline.Rda")
proline_angles <- proline[,3]
non_proline_angles <- non_proline[,3]
#skewness(non_proline_angles)
mean(non_proline_angles)
# [1] 168.9382
sd(non_proline_angles)
# [1] 14.36636
#normality tests
ad.test(non_proline_angles)
# p-value < 0.00000000000000022
# not_normal distribution
ks.test(non_proline_angles,pnorm(10000,168.9382,14.36636))
#Two-sample Kolmogorov-Smirnov test
#data:  non_proline_angles and pnorm(10000, 168.9382, 14.36636)
#D = 1, p-value = 0.27
#alternative hypothesis: two-sided
# Ho is that both are from the same population. Ho is accepted as p_val >0.05
#Shapiro Wilks test
non_proline_p_values <- numeric()
for (i in 1:5000){
temp_samp <- sample(5000,non_proline_angles)
test_result <- shapiro.test(temp_samp)
non_proline_p_values <- c(non_proline_p_values,test_result$p.value)
}
non_proline_p_values[0.05<non_proline_p_values]
# no pvalues >0.05 = 0
# Ho is that the data is normally distributed. Ho is rejected.
# comparison tests between proline 3rd mixed gaussian model(of 3)
# and non_proline data
# proline_3rd mixed gaussian
# mean =170.130773 sd = 4.571051
proline_3rd_mixed_sample <- rnorm(100000,mean = 170.130773,sd = 4.571051)
# non_proline bend angles
# mean = 168.9382 sd = 14.3663
# this means we shall use unquel varience test
t.test(proline_3rd_mixed_sample,non_proline_angles, alternative=two.sided)
library("ggplot2")
library("dplyr")
library(nortest)
load("proline.Rda")
load("non_proline.Rda")
proline_angles <- proline[,3]
non_proline_angles <- non_proline[,3]
#skewness(non_proline_angles)
mean(non_proline_angles)
# [1] 168.9382
sd(non_proline_angles)
# [1] 14.36636
#normality tests
ad.test(non_proline_angles)
# p-value < 0.00000000000000022
# not_normal distribution
ks.test(non_proline_angles,pnorm(10000,168.9382,14.36636))
#Two-sample Kolmogorov-Smirnov test
#data:  non_proline_angles and pnorm(10000, 168.9382, 14.36636)
#D = 1, p-value = 0.27
#alternative hypothesis: two-sided
# Ho is that both are from the same population. Ho is accepted as p_val >0.05
#Shapiro Wilks test
non_proline_p_values <- numeric()
for (i in 1:5000){
temp_samp <- sample(5000,non_proline_angles)
test_result <- shapiro.test(temp_samp)
non_proline_p_values <- c(non_proline_p_values,test_result$p.value)
}
non_proline_p_values[0.05<non_proline_p_values]
# no pvalues >0.05 = 0
# Ho is that the data is normally distributed. Ho is rejected.
# comparison tests between proline 3rd mixed gaussian model(of 3)
# and non_proline data
# proline_3rd mixed gaussian
# mean =170.130773 sd = 4.571051
proline_3rd_mixed_sample <- rnorm(1000,mean = 170.130773,sd = 4.571051)
# non_proline bend angles
# mean = 168.9382 sd = 14.3663
# this means we shall use unquel varience test
t.test(proline_3rd_mixed_sample,non_proline_angles)
library("ggplot2")
library("dplyr")
library(nortest)
load("proline.Rda")
load("non_proline.Rda")
proline_angles <- proline[,3]
non_proline_angles <- non_proline[,3]
#skewness(non_proline_angles)
mean(non_proline_angles)
# [1] 168.9382
sd(non_proline_angles)
# [1] 14.36636
#normality tests
ad.test(non_proline_angles)
# p-value < 0.00000000000000022
# not_normal distribution
ks.test(non_proline_angles,pnorm(10000,168.9382,14.36636))
#Two-sample Kolmogorov-Smirnov test
#data:  non_proline_angles and pnorm(10000, 168.9382, 14.36636)
#D = 1, p-value = 0.27
#alternative hypothesis: two-sided
# Ho is that both are from the same population. Ho is accepted as p_val >0.05
#Shapiro Wilks test
non_proline_p_values <- numeric()
for (i in 1:5000){
temp_samp <- sample(5000,non_proline_angles)
test_result <- shapiro.test(temp_samp)
non_proline_p_values <- c(non_proline_p_values,test_result$p.value)
}
non_proline_p_values[0.05<non_proline_p_values]
# no pvalues >0.05 = 0
# Ho is that the data is normally distributed. Ho is rejected.
# comparison tests between proline 3rd mixed gaussian model(of 3)
# and non_proline data
# proline_3rd mixed gaussian
# mean =170.130773 sd = 4.571051
proline_3rd_mixed_sample <- rnorm(10000,mean = 170.130773,sd = 4.571051)
# non_proline bend angles
# mean = 168.9382 sd = 14.3663
# this means we shall use unquel varience test
t.test(proline_3rd_mixed_sample,non_proline_angles)
library("ggplot2")
library("dplyr")
load("proline.Rda")
load("non_proline.Rda")
proline_angles <- proline[,3]
non_proline_angles <- non_proline[,3]
options(scipen = 999)
library("mixtools")
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
set.seed(1)
mixmdl2 <- (normalmixEM(proline_angles, k = 2, maxit=10000))
mixmdl3 <- (normalmixEM(proline_angles, k = 3, maxit=10000))
#mixmdl4 <- (normalmixEM(proline_angles, k = 4, maxit=10000))
#mixmdl5 <- (normalmixEM(proline_angles, k = 5, maxit=10000))
#mixmdl6 <- (normalmixEM(proline_angles, k = 6, maxit=10000))
#mixmdl7 <- (normalmixEM(proline_angles, k = 7, maxit=10000))
#mixmdl <- normalmixEM(proline_angles, k = 3, maxit=10000)
#summary(mixmdl)
#data.frame(bend_angle = mixmdl$x) %>%
#
#  ggplot() +
#  geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
#                 fill = "white") +
#  stat_function(geom = "line", fun = plot_mix_comps,
#                args = list(mixmdl$mu[1], mixmdl$sigma[1], lam = mixmdl$lambda[1]),
#                colour = "red", lwd = 1.5) +
#  stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[2], mixmdl$sigma[2], lam = mixmdl$lambda[2]),
#               colour = "blue", lwd = 1.5) +
# stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[3], mixmdl$sigma[3], lam = mixmdl$lambda[3]),
#               colour = "green", lwd = 1.5) +
#  ylab("Density")
summary(mixmdl2)
data.frame(bend_angle = mixmdl2$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[1], mixmdl2$sigma[1], lam = mixmdl2$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[2], mixmdl2$sigma[2], lam = mixmdl2$lambda[2]),
colour = "blue", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("two gaussian mixed model")
ylab("Density")
summary(mixmdl3)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[1], mixmdl3$sigma[1], lam = mixmdl3$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[2], mixmdl3$sigma[2], lam = mixmdl3$lambda[2]),
colour = "blue", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[3], mixmdl3$sigma[3], lam = mixmdl3$lambda[2]),
colour = "green", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("Three gaussian mixed model")
ylab("Density")
proline_angle_df <- data.frame(proline_angles)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot(proline_angle_df, aes(x=proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("proline bend angles with density function")
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
library("ggplot2")
library("dplyr")
load("proline.Rda")
load("non_proline.Rda")
proline_angles <- proline[,3]
non_proline_angles <- non_proline[,3]
options(scipen = 999)
library("mixtools")
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
set.seed(1)
mixmdl2 <- (normalmixEM(proline_angles, k = 2, maxit=10000))
mixmdl3 <- (normalmixEM(proline_angles, k = 3, maxit=10000))
#mixmdl4 <- (normalmixEM(proline_angles, k = 4, maxit=10000))
#mixmdl5 <- (normalmixEM(proline_angles, k = 5, maxit=10000))
#mixmdl6 <- (normalmixEM(proline_angles, k = 6, maxit=10000))
#mixmdl7 <- (normalmixEM(proline_angles, k = 7, maxit=10000))
#mixmdl <- normalmixEM(proline_angles, k = 3, maxit=10000)
#summary(mixmdl)
#data.frame(bend_angle = mixmdl$x) %>%
#
#  ggplot() +
#  geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
#                 fill = "white") +
#  stat_function(geom = "line", fun = plot_mix_comps,
#                args = list(mixmdl$mu[1], mixmdl$sigma[1], lam = mixmdl$lambda[1]),
#                colour = "red", lwd = 1.5) +
#  stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[2], mixmdl$sigma[2], lam = mixmdl$lambda[2]),
#               colour = "blue", lwd = 1.5) +
# stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[3], mixmdl$sigma[3], lam = mixmdl$lambda[3]),
#               colour = "green", lwd = 1.5) +
#  ylab("Density")
summary(mixmdl2)
data.frame(bend_angle = mixmdl2$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[1], mixmdl2$sigma[1], lam = mixmdl2$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[2], mixmdl2$sigma[2], lam = mixmdl2$lambda[2]),
colour = "blue", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("two gaussian mixed model")
ylab("Density")
summary(mixmdl3)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[1], mixmdl3$sigma[1], lam = mixmdl3$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[2], mixmdl3$sigma[2], lam = mixmdl3$lambda[2]),
colour = "blue", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[3], mixmdl3$sigma[3], lam = mixmdl3$lambda[2]),
colour = "green", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("Three gaussian mixed model")
ylab("Density")
proline_angle_df <- data.frame(proline_angles)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot(proline_angle_df, aes(x=proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("proline bend angles with density function")
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
#  attempting to normalise the proline data
library("ggplot2")
library("dplyr")
library("mixtools")
load("proline.Rda")
load("non_proline.Rda")
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
proline_angles <- proline[,3]
non_proline_angles <- non_proline[,3]
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
#  attempting to normalise the proline data by fliping values x> the maximum point. Dividing by 2 and flipping across the maximum point again
library("ggplot2")
library("dplyr")
library("mixtools")
load("proline.Rda")
load("non_proline.Rda")
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
proline_angles <- proline[,3]
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
test_vector <- c(1,2,3,4,5,6,7,8,9,10)
test_df <- data.frame(test_vector)
#  attempting to normalise the proline data by fliping values x> the maximum point. Dividing by 2 and flipping across the maximum point again
library("ggplot2")
library("dplyr")
library("mixtools")
load("proline.Rda")
load("non_proline.Rda")
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
proline_angles <- proline[,3]
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
test_vector <- c(1,2,3,4,5,6,7,8,9,10)
test_df <- data.frame(test_vector)
test_df[test_df>5]
#  attempting to normalise the proline data by fliping values x> the maximum point. Dividing by 2 and flipping across the maximum point again
library("ggplot2")
library("dplyr")
library("mixtools")
load("proline.Rda")
load("non_proline.Rda")
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
proline_angles <- proline[,3]
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
test_vector <- c(1,2,3,4,5,6,7,8,9,10)
test_df <- data.frame(test_vector)
less_than_5 <- test_df[test_df<5]
greater_than_5 <- test_df[test_df>5]
#  attempting to normalise the proline data by fliping values x> the maximum point. Dividing by 2 and flipping across the maximum point again
library("ggplot2")
library("dplyr")
library("mixtools")
load("proline.Rda")
load("non_proline.Rda")
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
proline_angles <- proline[,3]
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
test_vector <- c(1,2,3,4,5,6,7,8,9,10)
test_df <- data.frame(test_vector)
for (i in test_vector){
if (test_vector[i] > 5){
difference_vector <- test_vector[i] - 5
test_vector[i] = test_vector[i] - difference_vector
}
}
greater_than_5 <- test_df[test_df>5]
#  attempting to normalise the proline data by fliping values x> the maximum point. Dividing by 2 and flipping across the maximum point again
library("ggplot2")
library("dplyr")
library("mixtools")
load("proline.Rda")
load("non_proline.Rda")
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
proline_angles <- proline[,3]
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
test_vector <- c(1,2,3,4,5,6,7,8,9,10)
test_df <- data.frame(test_vector)
for (i in test_vector){
if (test_vector[i] > 5){
difference<- test_vector[i] - 5
test_vector[i] = test_vector[i] - (difference*2)
}
}
greater_than_5 <- test_df[test_df>5]
#  attempting to normalise the proline data by fliping values x> the maximum point. Dividing by 2 and flipping across the maximum point again
library("ggplot2")
library("dplyr")
library("mixtools")
load("proline.Rda")
load("non_proline.Rda")
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
proline_angles <- proline[,3]
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
test_vector <- c(1,2,3,4,5,6,7,8,9,10)
test_df <- data.frame(test_vector)
for (i in test_vector){
if (test_vector[i] > 5){
difference<- test_vector[i] - 5
test_vector[i] = test_vector[i] - (difference*2)
}
}
greater_than_5 <- test_df[test_df>5]
