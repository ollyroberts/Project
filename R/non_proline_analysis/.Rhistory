data.frame(bend_angle = mixmdl2$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[1], mixmdl2$sigma[1], lam = mixmdl2$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[2], mixmdl2$sigma[2], lam = mixmdl2$lambda[2]),
colour = "blue", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("two gaussian mixed model")
ylab("Density")
summary(mixmdl3)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[1], mixmdl3$sigma[1], lam = mixmdl3$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[2], mixmdl3$sigma[2], lam = mixmdl3$lambda[2]),
colour = "blue", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[3], mixmdl3$sigma[3], lam = mixmdl3$lambda[2]),
colour = "green", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("Three gaussian mixed model")
ylab("Density")
proline_angle_df <- data.frame(proline_angles)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot(proline_angle_df, aes(x=proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("proline bend angles with density function")
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
save(combined_1gap_proline_16_07_19_output,file='proline_1gap')
load("proline.Rda")
load("non_proline.Rda")
save(combined_1gap_proline_16_07_19_output,file='proline_1gap')
load("proline.Rda")
library("ggplot2")
library("dplyr")
library(nortest)
load("proline.Rda")
load("non_proline.Rda")
library(readr)
X1gap_proline <- read_table2("Git/Project/helix_counts/1_gap/1gap_03.08.2019_2angle.txt",
col_names = FALSE)
View(X1gap_proline)
library(readr)
X3none_proline <- read_table2("Git/Project/helix_counts/3_gap/3gap_03.08.2019_1angle.txt",
col_names = FALSE)
View(X3none_proline)
View(X3none_proline)
non_proline_angles <- X3none_proline$X6
proline_angles <- X1gap_proline$X6
#non_proline_angles <- options(scipen = 999)
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
set.seed(1)
mixmdl2 <- (normalmixEM(proline_angles, k = 2, maxit=10000))
mixmdl3 <- (normalmixEM(proline_angles, k = 3, maxit=10000))
#mixmdl4 <- (normalmixEM(proline_angles, k = 4, maxit=10000))
#mixmdl5 <- (normalmixEM(proline_angles, k = 5, maxit=10000))
#mixmdl6 <- (normalmixEM(proline_angles, k = 6, maxit=10000))
#mixmdl7 <- (normalmixEM(proline_angles, k = 7, maxit=10000))
#mixmdl <- normalmixEM(proline_angles, k = 3, maxit=10000)
#summary(mixmdl)
#data.frame(bend_angle = mixmdl$x) %>%
#
#  ggplot() +
#  geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
#                 fill = "white") +
#  stat_function(geom = "line", fun = plot_mix_comps,
#                args = list(mixmdl$mu[1], mixmdl$sigma[1], lam = mixmdl$lambda[1]),
#                colour = "red", lwd = 1.5) +
#  stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[2], mixmdl$sigma[2], lam = mixmdl$lambda[2]),
#               colour = "blue", lwd = 1.5) +
# stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[3], mixmdl$sigma[3], lam = mixmdl$lambda[3]),
#               colour = "green", lwd = 1.5) +
#  ylab("Density")
summary(mixmdl2)
data.frame(bend_angle = mixmdl2$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[1], mixmdl2$sigma[1], lam = mixmdl2$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[2], mixmdl2$sigma[2], lam = mixmdl2$lambda[2]),
colour = "blue", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("two gaussian mixed model")
ylab("Density")
summary(mixmdl3)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[1], mixmdl3$sigma[1], lam = mixmdl3$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[2], mixmdl3$sigma[2], lam = mixmdl3$lambda[2]),
colour = "blue", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[3], mixmdl3$sigma[3], lam = mixmdl3$lambda[2]),
colour = "green", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("Three gaussian mixed model")
ylab("Density")
proline_angle_df <- data.frame(proline_angles)
#data.frame(bend_angle = mixmdl3$x) %>%
ggplot(proline_angle_df, aes(x=proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("proline bend angles with density function")
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
non_pro_mixmdl1 <- (normalmixEM(non_proline_angles, k = 1, maxit=10000))
library("ggplot2")
library("dplyr")
library("mixtools")
non_proline_angles <- X3none_proline$X6
proline_angles <- X1gap_proline$X6
#non_proline_angles <- options(scipen = 999)
#' Plot a Mixture Component
#'
#' @param x Input data
#' @param mu Mean of component
#' @param sigma Standard deviation of component
#' @param lam Mixture weight of component
plot_mix_comps <- function(x, mu, sigma, lam) {
lam * dnorm(x, mu, sigma)
}
set.seed(1)
mixmdl2 <- (normalmixEM(proline_angles, k = 2, maxit=10000))
mixmdl3 <- (normalmixEM(proline_angles, k = 3, maxit=10000))
#mixmdl4 <- (normalmixEM(proline_angles, k = 4, maxit=10000))
#mixmdl5 <- (normalmixEM(proline_angles, k = 5, maxit=10000))
#mixmdl6 <- (normalmixEM(proline_angles, k = 6, maxit=10000))
#mixmdl7 <- (normalmixEM(proline_angles, k = 7, maxit=10000))
#mixmdl <- normalmixEM(proline_angles, k = 3, maxit=10000)
#summary(mixmdl)
#data.frame(bend_angle = mixmdl$x) %>%
#
#  ggplot() +
#  geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
#                 fill = "white") +
#  stat_function(geom = "line", fun = plot_mix_comps,
#                args = list(mixmdl$mu[1], mixmdl$sigma[1], lam = mixmdl$lambda[1]),
#                colour = "red", lwd = 1.5) +
#  stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[2], mixmdl$sigma[2], lam = mixmdl$lambda[2]),
#               colour = "blue", lwd = 1.5) +
# stat_function(geom = "line", fun = plot_mix_comps,
#               args = list(mixmdl$mu[3], mixmdl$sigma[3], lam = mixmdl$lambda[3]),
#               colour = "green", lwd = 1.5) +
#  ylab("Density")
summary(mixmdl2)
data.frame(bend_angle = mixmdl2$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[1], mixmdl2$sigma[1], lam = mixmdl2$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl2$mu[2], mixmdl2$sigma[2], lam = mixmdl2$lambda[2]),
colour = "blue", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("two gaussian mixed model")
ylab("Density")
summary(mixmdl3)
data.frame(bend_angle = mixmdl3$x) %>%
ggplot() +
geom_histogram(aes(bend_angle, ..density..), binwidth = 1, colour = "black",
fill = "white") +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[1], mixmdl3$sigma[1], lam = mixmdl3$lambda[1]),
colour = "red", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[2], mixmdl3$sigma[2], lam = mixmdl3$lambda[2]),
colour = "blue", lwd = 1.5) +
stat_function(geom = "line", fun = plot_mix_comps,
args = list(mixmdl3$mu[3], mixmdl3$sigma[3], lam = mixmdl3$lambda[2]),
colour = "green", lwd = 1.5) +
coord_cartesian(xlim = c(75, 180)) +
ggtitle("Three gaussian mixed model")
ylab("Density")
proline_angle_df <- data.frame(proline_angles)
#data.frame(bend_angle = mixmdl3$x) %>%
ggplot(proline_angle_df, aes(x=proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("proline bend angles with density function")
non_proline_angle_df <- data.frame(non_proline_angles)
ggplot(non_proline_angle_df, aes(x=non_proline_angles)) +
geom_histogram(aes(y=..density..),      # Histogram with density instead of count on y-axis
binwidth=.5,
colour="black", fill="white") +
coord_cartesian(xlim = c(75, 180)) +
geom_density(alpha=.2, fill="#FF6666") +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
non_pro_mixmdl1 <- (normalmixEM(non_proline_angles, k = 1, maxit=10000))
library("ggplot2")
library("dplyr")
library("mixtools")
library("ggplot2")
setwd("/home/oliver/Git/Project/R/non_proline_analysis")
write(1:10,file="test.txt")
getwd()
oneGap       <- read.delim("1gap_only_03.08.2019_2angle.txt", header = FALSE, sep = "", dec = ".")
twoGap       <- read.table("2gap_only_06.08.2019.txt", header = FALSE, sep = " ", dec = ".")
threeGap     <- read.table("3_gap_only_06.08.19.txt", header = FALSE, sep = " ", dec = ".")
threeAndLess <-read.table("3gap_and_less_03.08.2019_2angle.txt", header = FALSE, sep = " ", dec = ".")
View(oneGap$V6)
breaks <- (seq(1,180,by=1))
breaksDf <- data.frame(breaks)
one_gap_angles <-data.frame(oneGap$V6)
combo <- c(oneGap$V6)
ggplot(breaks,aes(x = one_gap_angles)) +
geom_histogram(breaks = breaks,aes(x=one_gap_angles,y=..density..),      # Histogram with density instead of count on y-axis
col="black",fill="white") +
geom_density(col=2) +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
library(readr)
X1gap_only_03_08_2019_2angle <- read_table2("1gap_only_03.08.2019_2angle.txt",
col_names = FALSE)
View(X1gap_only_03_08_2019_2angle)
one_gap_angles <-oneGap$V6
one_gap_anglesDf <- data.frame(one_gap_angles)
one_gap_anglesDf <- data.frame(one_gap_angles)
ggplot(breaks,aes(x = one_gap_anglesDf$one_gap_angles)) +
geom_histogram(breaks = breaks,aes(x=one_gap_angles,y=..density..),      # Histogram with density instead of count on y-axis
col="black",fill="white") +
geom_density(col=2) +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
ggplot(breaks,aes(x = one_gap_anglesDf$one_gap_angles)) +
geom_histogram(breaks = breaks,aes(x=one_gap_anglesDf$one_gap_angles,y=..density..),      # Histogram with density instead of count on y-axis
col="black",fill="white") +
geom_density(col=2) +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
one_gap_anglesDf <- X1gap_only_03_08_2019_2angle$X6
one_gap_anglesDf <- data.frame(X1gap_only_03_08_2019_2angle$X6)
ggplot(,aes(x = breaksDf)) +
geom_histogram(breaks = breaks,aes(x=one_gap_anglesDf$one_gap_angles,y=..density..),      # Histogram with density instead of count on y-axis
col="black",fill="white") +
geom_density(col=2) +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
ggplot(breaksDf) +
geom_histogram(breaks = breaks,aes(x=one_gap_anglesDf$one_gap_angles,y=..density..),      # Histogram with density instead of count on y-axis
col="black",fill="white") +
geom_density(col=2) +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
ggplot(x = breaksDf) +
geom_histogram(breaks = breaks,aes(x=one_gap_anglesDf$one_gap_angles,y=..density..),      # Histogram with density instead of count on y-axis
col="black",fill="white") +
geom_density(col=2) +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
ggplot
ggplot(one_gap_anglesDf,aes(x = one_gap_anglesDf)) +
geom_histogram(breaks = breaks,aes(x=one_gap_anglesDf=..density..),      # Histogram with density instead of count on y-axis
col="black",fill="white") +
geom_density(col=2) +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
ggplot(one_gap_anglesDf,aes(x = one_gap_anglesDf)) +
geom_histogram(breaks = breaks,aes(x=one_gap_anglesDf=..density..),      # Histogram with density instead of count on y-axis
col="black",fill="white") +
#geom_density(col=2) +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
ggplot(one_gap_anglesDf,aes(x = one_gap_anglesDf$X1gap_only_03_08_2019_2angle.X6)) +
geom_histogram(breaks = breaks,aes(x=one_gap_anglesDf$X1gap_only_03_08_2019_2angle.X6=..density..),      # Histogram with density instead of count on y-axis
col="black",fill="white") +
#geom_density(col=2) +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6.y=..density..),      # Histogram with density instead of count on y-axis
col="black",fill="white") +
#geom_density(col=2) +  # Overlay with transparent density plot
ggtitle("non proline bend angles with density function")
oneGapNumeric <- numeric(oneGap$V6)
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6.y=..density..))      # Histogram with density instead of count on y-axis
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6))      # Histogram with density instead of count on y-axis
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="blue")      # Histogram with density instead of count on y-axis
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="white",fill="black")      # Histogram with density instead of count on y-axis
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="black",fill="white")      # Histogram with density instead of count on y-axis
geom_density(oneGap$V6)
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="black",fill="white")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="black",fill="white") +
geom_density(aes(oneGap$V6))
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="black",fill="white") +
geom_density(aes(oneGap$V6).
col="red")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="black",fill="white") +
geom_density(aes(oneGap$V6,
col="red"))
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="black",fill="white") +
geom_density(aes(x =oneGap$V6,
col="red"))
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="black",fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="red",fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="red",fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="blue",fill="white") +
geom_density(alpha=.2, fill="#FF6666")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="blue",fill="white") +
geom_density(col=2)
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="blue",fill="white") +
geom_density(col="red")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="blue",fill="white") +
geom_density(aes(oneGap$V6),col="red")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6),
col="blue",fill="white") +
geom_density(aes(x=oneGap$V6),col="red")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(breaks = breaks,aes(x=oneGap$V6))+
geom_density(aes(x=oneGap$V6),col="red")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(alpha =0.2,breaks = breaks,aes(x=oneGap$V6))+
geom_density(aes(x=oneGap$V6),col="red")
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram()+
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram()
ggplot(aes(x = oneGap$V6)) +
geom_histogram()
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_histogram(aes(x=oneGap$V6))
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_density()
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_density() +
geom_histogram()
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_density() +
geom_histogram(alpha = 0.1)
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_density() +
geom_histogram(alpha = 0.1, (y = ..density..))
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_density() +
geom_histogram(alpha = 0.1, aes(y = ..density..))
ggplot(oneGap,aes(x = oneGap$V6)) +
geom_density() +
geom_density(aes(x=twoGap$V6,col="red")) +
geom_histogram(alpha = 0.1, aes(y = ..density..))
one_gap_angles$Type <- "1"
one_gap_angles <-oneGap$V6
one_gap_anglesDf <- data.frame(X1gap_only_03_08_2019_2angle$X6)
one_gap_anglesDf$Type <- "1"
library(readr)
X2gap_only_06_08_2019 <- read_table2("2gap_only_06.08.2019.txt",
col_names = FALSE)
library(readr)
X3_gap_only_06_08_19 <- read_table2("3_gap_only_06.08.19.txt",
col_names = FALSE)
View(X3_gap_only_06_08_19)
library(readr)
X3gap_and_less_03_08_2019_2angle <- read_table2("3gap_and_less_03.08.2019_2angle.txt",
col_names = FALSE)
one_gap_anglesDf$angle <- data.frame(X1gap_only_03_08_2019_2angle$X6)
two_gap_anglesDf$angle <- data.frame(X2gap_only_06_08_2019$X6)
one_gap_anglesDf$ <- data.frame(X1gap_only_03_08_2019_2angle$X6)
two_gap_anglesDf$ <- data.frame(X2gap_only_06_08_2019$X6)
three_gap_anglesDf$ <- data.frame(X3_gap_only_06_08_19e$X6)
one_gap_anglesDf <- data.frame(X1gap_only_03_08_2019_2angle$X6)
two_gap_anglesDf <- data.frame(X2gap_only_06_08_2019$X6)
three_gap_anglesDf <- data.frame(X3_gap_only_06_08_19e$X6)
three_gap_anglesDf <- data.frame(X3_gap_only_06_08_19$X6)
one_gap_anglesDf$Type   <- "1"
two_gap_anglesDf$Type   <- "2"
three_gap_anglesDf$Type <- "3"
names(one_gap_anglesDf)[names(one_gap_anglesDf) == "X1gap_only_03_08_2019_2angle.X6"] <-"angles"
names(twop_anglesDf)[names(two_gap_anglesDf) == "X2gap_only_06_08_2019.X6"] <-"angles"
names(two_anglesDf)[names(two_gap_anglesDf) == "X2gap_only_06_08_2019.X6"] <-"angles"
names(two_gap_anglesDf)[names(two_gap_anglesDf) == "X2gap_only_06_08_2019.X6"] <-"angles"
names(three_gap_anglesDf)[names(three_gap_anglesDf) == "X3_gap_only_06_08_19.X6"] <-"angles"
names(one_gap_anglesDf)[names(one_gap_anglesDf) == "X1gap_only_03_08_2019_2angle.X6"] <-"angles"
names(two_gap_anglesDf)[names(two_gap_anglesDf) == "X2gap_only_06_08_2019.X6"] <-"angles"
names(three_gap_anglesDf)[names(three_gap_anglesDf) == "X3_gap_only_06_08_19.X6"] <-"angles"
two_gap_anglesDf$
combo <- merge(one_gap_anglesDf,two_gap_anglesDf,three_gap_anglesDf)
two_gap_anglesDf$
combo <- merge(one_gap_anglesDf,two_gap_anglesDf,three_gap_anglesDf,by.x="angles",by.y"Type")
two_gap_anglesDf$
combo <- merge(one_gap_anglesDf,two_gap_anglesDf,three_gap_anglesDf,by.x="angles",by.y"Type")
two_gap_anglesDf$
combo <- merge(one_gap_anglesDf,two_gap_anglesDf)
two_gap_anglesDf$
combo$angles <-c(one_gap_anglesDf$angles,two_gap_anglesDf$angles)
combos =data.frame()
combo$angles <-c(one_gap_anglesDf$angles,two_gap_anglesDf$angles)
combo$"angles" <-c(one_gap_anglesDf$angles,two_gap_anglesDf$angles)
oneGapNumeric <- numeric(oneGap$V6)
View(combos)
View(combo)
combo$angles <-merge(one_gap_anglesDf$angles,two_gap_anglesDf$angles)
combo$angles <-paste(one_gap_anglesDf$angles,two_gap_anglesDf$angles)
combo=matrix()
View(combo)
combos =data.frame()
combos =data.frame()
combo$angles <-rbind(one_gap_anglesDf,two_gap_anglesDf)
two_gap_anglesDf   <- data.frame(X2gap_only_06_08_2019$X6)
names(two_gap_anglesDf)[names(two_gap_anglesDf) == "X2gap_only_06_08_2019.X6"] <-"angles"
combo$angles <-rbind(one_gap_anglesDf,two_gap_anglesDf)
two_gap_anglesDf$Type   <- "2"
combo$angles <-rbind(one_gap_anglesDf,two_gap_anglesDf)
combos =data.frame()
combo <- c(1,2)
combos =data.frame()
combo$angles <-rbind(one_gap_anglesDf,two_gap_anglesDf)
combo <-rbind(one_gap_anglesDf,two_gap_anglesDf)
combo1_2 <-rbind(one_gap_anglesDf,two_gap_anglesDf)
combo1_2_3 <-rbind(combo1_2,three_gap_anglesDf)
ggplot(combo1_2_3, aes(x = rating, fill = type)) +
geom_histogram(binwidth = .5, alpha =.5, position = "identity")
ggplot(combo1_2_3, aes(x = angles, fill = type)) +
geom_histogram(binwidth = .5, alpha =.5, position = "identity")
ggplot(combo1_2_3, aes(x = angles, fill = Type)) +
geom_histogram(binwidth = .5, alpha =.5, position = "identity")
ggplot(combo1_2_3, aes(x = angles, fill = Type)) +
geom_histogram(binwidth = .5, alpha =.5, position = "identity")
ggplot(combo1_2_3, aes(x = angles, fill = Type)) +
geom_histogram(binwidth = .5, alpha =.5, position = "identity") +
geom_density(alpha = .3)
ggplot(combo1_2_3, aes(x = angles, fill = Type)) +
#geom_histogram(binwidth = .5, alpha =.5, position = "identity") +
geom_density(alpha = .3)
save(combo1_2_3), file = "one_two_three_gap_prolines.RData")
save(combo1_2_3, file = "one_two_three_gap_prolines.RData")
write,csv(combo1_2_3, file = "one_two_three_gap_prolines.RData")
write.csv(combo1_2_3, file = "one_two_three_gap_prolines.RData")
save
save(combo1_2_3, file = "one_two_three_gap_prolines.RData")
write.csv(combo1_2_3, file = "one_two_three_gap_prolines.csv")
ggplot(combo1_2_3, aes(x = angles, fill = Type)) +
#geom_histogram(binwidth = .5, alpha =.5, position = "identity") +
geom_density(alpha = .3)+
ggtitle("Bend angle of Proline containing alpha helices seperated by gap length")
ylab("Density") +
xlab("Bend angle of helices")
